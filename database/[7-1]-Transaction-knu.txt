3:I[9275,[],""]
6:I[1343,[],""]
8:I[231,["217","static/chunks/578c2090-c1b891f3b6c746fd.js","675","static/chunks/b563f954-758761ebc4ecc2e7.js","699","static/chunks/8e1d74a4-44e18cb83de8b273.js","779","static/chunks/0e762574-0fedad6633d82a8a.js","231","static/chunks/231-87925b9c7247c60f.js","575","static/chunks/app/%5Btheme%5D/layout-41c0f24cb97d52a9.js"],""]
4:["theme","database","d"]
5:["post","%5B7-1%5D-Transaction-knu","d"]
0:["tCyrFTokHlLCy-569QXfa",[[["",{"children":[["theme","database","d"],{"children":[["post","%5B7-1%5D-Transaction-knu","d"],{"children":["__PAGE__?{\"theme\":\"database\",\"post\":\"[7-1]-Transaction-knu\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":[["theme","database","d"],{"children":[["post","%5B7-1%5D-Transaction-knu","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/dd89e605550f760e.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$L7",null],null]},[["$","html",null,{"lang":"ko","children":["$","body",null,{"className":"__className_098cd6 min-h-screen","children":["$","div",null,{"className":"grid grid-cols-[24rem_1fr] auto-rows-auto","children":[["$","nav",null,{"className":"__className_92d895 bg-white w-full h-14 flex items-center justify-between pl-5 pr-5 mb-20 border-b-2 border-b-slate-300 text-2xl fixed","children":[["$","$L8",null,{"href":"/","children":"tomatoM4to's blog"}],["$","div",null,{"className":"hidden lg:flex items-center","children":[["$","input",null,{"type":"text","className":"w-36 h-7 rounded-full border-2 border-black pl-2","placeholder":"search"}],["$","div",null,{"className":"bg-slate-300 h-10 w-0.5 ml-2"}],["$","$L8",null,{"href":"https://github.com/tomatoM4to/tomatoM4to.github.io","className":"p-2 rounded-full hover:bg-gray-300 transition-colors duration-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 16 16","className":"text-2xl cursor-pointer","children":["$undefined",[["$","path","0",{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.976 0A7.977 7.977 0 0 0 0 7.976c0 3.522 2.3 6.507 5.431 7.584.392.049.538-.196.538-.392v-1.37c-2.201.49-2.69-1.076-2.69-1.076-.343-.93-.881-1.175-.881-1.175-.734-.489.048-.489.048-.489.783.049 1.224.832 1.224.832.734 1.223 1.859.88 2.3.685.048-.538.293-.88.489-1.076-1.762-.196-3.621-.881-3.621-3.964 0-.88.293-1.566.832-2.153-.05-.147-.343-.978.098-2.055 0 0 .685-.196 2.201.832.636-.196 1.322-.245 2.007-.245s1.37.098 2.006.245c1.517-1.027 2.202-.832 2.202-.832.44 1.077.146 1.908.097 2.104a3.16 3.16 0 0 1 .832 2.153c0 3.083-1.86 3.719-3.62 3.915.293.244.538.733.538 1.467v2.202c0 .196.146.44.538.392A7.984 7.984 0 0 0 16 7.976C15.951 3.572 12.38 0 7.976 0z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}],["$","button",null,{"className":"p-2 rounded-full hover:bg-gray-300 transition-colors duration-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 24 24","className":"text-2xl cursor-pointer","children":["$undefined",[["$","path","0",{"fill":"none","strokeWidth":"2","d":"M12,23 C18.0751322,23 23,18.0751322 23,12 C23,5.92486775 18.0751322,1 12,1 C5.92486775,1 1,5.92486775 1,12 C1,18.0751322 5.92486775,23 12,23 Z M12,23 C15,23 16,18 16,12 C16,6 15,1 12,1 C9,1 8,6 8,12 C8,18 9,23 12,23 Z M2,16 L22,16 M2,8 L22,8","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}],["$","button",null,{"className":"p-2 rounded-full hover:bg-gray-300 transition-colors duration-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 16 16","className":"text-2xl cursor-pointer","children":["$undefined",[["$","path","0",{"d":"M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278","children":[]}],["$","path","1",{"d":"M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.73 1.73 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.73 1.73 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.73 1.73 0 0 0 1.097-1.097zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.16 1.16 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.16 1.16 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}]]}]]}],["$","main",null,{"className":"col-span-2","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e09042d6d37504f5.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/98b6e1014510d512.css","precedence":"next","crossOrigin":"$undefined"}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=yes"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"tomatom4to's Computer Science Blog"}],["$","meta","3",{"name":"description","content":"Comprehensive computer science knowledge covering OS, Database, AI, Networks, Linux, and Docker. Learn computer science concepts with clear explanations and practical examples."}],["$","meta","4",{"name":"author","content":"tomatom4to"}],["$","meta","5",{"name":"keywords","content":"Computer Science,Operating Systems,Database,AI,Network,Linux,Docker,Programming,Software Development"}],["$","meta","6",{"name":"creator","content":"tomatom4to"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://tomatom4to.github.io"}],["$","meta","10",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","11",{"property":"og:title","content":"tomatom4to's Computer Science Blog"}],["$","meta","12",{"property":"og:description","content":"Your gateway to comprehensive computer science knowledge and practical programming skills"}],["$","meta","13",{"property":"og:url","content":"https://tomatom4to.github.io"}],["$","meta","14",{"property":"og:site_name","content":"tomatom4to's CS Blog"}],["$","meta","15",{"property":"og:locale","content":"ko_KR"}],["$","meta","16",{"property":"og:type","content":"website"}],["$","meta","17",{"name":"twitter:card","content":"summary"}],["$","meta","18",{"name":"twitter:title","content":"tomatom4to's Computer Science Blog"}],["$","meta","19",{"name":"twitter:description","content":"Your gateway to comprehensive computer science knowledge and practical programming skills"}],["$","link","20",{"rel":"icon","href":"/icon.ico?3c4912ce8b26c1d6","type":"image/x-icon","sizes":"256x256"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
a:I[1815,["217","static/chunks/578c2090-c1b891f3b6c746fd.js","675","static/chunks/b563f954-758761ebc4ecc2e7.js","699","static/chunks/8e1d74a4-44e18cb83de8b273.js","779","static/chunks/0e762574-0fedad6633d82a8a.js","231","static/chunks/231-87925b9c7247c60f.js","575","static/chunks/app/%5Btheme%5D/layout-41c0f24cb97d52a9.js"],"Hamburger"]
7:["$","div",null,{"className":"flex","children":[["$","$La",null,{"res":[{"isOutLine":false,"firstOrder":1,"secondOrder":-1,"order":"1","title":"Introduction","originalName":"[1]-Introduction"},{"isOutLine":false,"firstOrder":2,"secondOrder":-1,"order":"2","title":"Relational data model","originalName":"[2]-Relational-data-model"},{"isOutLine":true,"firstOrder":2,"secondOrder":1,"order":"2-1","title":"Relational algebra","originalName":"[2-1]-Relational-algebra"},{"isOutLine":false,"firstOrder":3,"secondOrder":-1,"order":"3","title":"SQL concept","originalName":"[3]-SQL-concept"},{"isOutLine":true,"firstOrder":3,"secondOrder":1,"order":"3-1","title":"Create table","originalName":"[3-1]-Create-table"},{"isOutLine":true,"firstOrder":3,"secondOrder":2,"order":"3-2","title":"Integreity Constraint","originalName":"[3-2]-Integreity-Constraint"},{"isOutLine":true,"firstOrder":3,"secondOrder":3,"order":"3-3","title":"Query","originalName":"[3-3]-Query"},{"isOutLine":true,"firstOrder":3,"secondOrder":4,"order":"3-4","title":"View","originalName":"[3-4]-View"},{"isOutLine":true,"firstOrder":3,"secondOrder":5,"order":"3-5","title":"Index","originalName":"[3-5]-Index"},{"isOutLine":false,"firstOrder":4,"secondOrder":-1,"order":"4","title":"Database Programming","originalName":"[4]-Database-Programming"},{"isOutLine":false,"firstOrder":5,"secondOrder":-1,"order":"5","title":"web","originalName":"[5]-web"},{"isOutLine":false,"firstOrder":6,"secondOrder":-1,"order":"6","title":"Normalization","originalName":"[6]-Normalization"},{"isOutLine":false,"firstOrder":7,"secondOrder":-1,"order":"7","title":"Transaction","originalName":"[7]-Transaction"},{"isOutLine":true,"firstOrder":7,"secondOrder":1,"order":"7-1","title":"Transaction knu","originalName":"[7-1]-Transaction-knu"},{"isOutLine":false,"firstOrder":99,"secondOrder":-1,"order":"99","title":"all in one","originalName":"[99]-all-in-one"}],"params":{"theme":"database"}}],["$","aside",null,{"className":"hidden lg:flex w-64 2xl:w-96 flex-col h-screen border-r-2 border-gray-300 mt-14 p-1 pl-5 fixed overflow-y-auto overscroll-contain","children":[["$","$L8",null,{"href":"/database/[1]-Introduction","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["1",". ","Introduction"]}],["$","$L8",null,{"href":"/database/[2]-Relational-data-model","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["2",". ","Relational data model"]}],["$","$L8",null,{"href":"/database/[2-1]-Relational-algebra","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["2-1",". ","Relational algebra"]}],["$","$L8",null,{"href":"/database/[3]-SQL-concept","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3",". ","SQL concept"]}],["$","$L8",null,{"href":"/database/[3-1]-Create-table","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-1",". ","Create table"]}],["$","$L8",null,{"href":"/database/[3-2]-Integreity-Constraint","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-2",". ","Integreity Constraint"]}],["$","$L8",null,{"href":"/database/[3-3]-Query","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-3",". ","Query"]}],["$","$L8",null,{"href":"/database/[3-4]-View","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-4",". ","View"]}],["$","$L8",null,{"href":"/database/[3-5]-Index","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-5",". ","Index"]}],["$","$L8",null,{"href":"/database/[4]-Database-Programming","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["4",". ","Database Programming"]}],["$","$L8",null,{"href":"/database/[5]-web","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["5",". ","web"]}],["$","$L8",null,{"href":"/database/[6]-Normalization","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["6",". ","Normalization"]}],["$","$L8",null,{"href":"/database/[7]-Transaction","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["7",". ","Transaction"]}],["$","$L8",null,{"href":"/database/[7-1]-Transaction-knu","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["7-1",". ","Transaction knu"]}],["$","$L8",null,{"href":"/database/[99]-all-in-one","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["99",". ","all in one"]}]]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]}]
2:["$","div",null,{"className":"lg:ml-64 2xl:ml-96 mt-32 mb-32 flex-1 flex flex-col items-center overflow-x-hidden","children":["$","div",null,{"className":"w-11/12 md:w-3/4 lg:w-2/3 2xl:w-1/2 markdown-body","children":["생성 날짜: ","Wed Dec 04 2024",["$","br",null,{}],"마지막 수정 날짜: ","Wed Dec 04 2024",["$","br",null,{}],["$","br",null,{}],["$","br",null,{}],["$","br",null,{}],[["$","p",null,{"children":"이 이후론 관리자의 역할, 윈도우도 관리자 권한 실행 있는것처럼"}],"\n",["$","p",null,{"children":"학부수준에선 심도있게 하긴 어려움, 그래도 이정도만 알아도 기본은 함"}],"\n",["$","p",null,{"children":"DB 내부 구조까지 알아야 어느정도 알 수 있음, 그래도 매우 중요한 부분"}],"\n",["$","h1",null,{"children":"Transaction"}],"\n",["$","p",null,{"children":"번역하면 거래로 DBMS 에서 데이터를 다루는 논리적 작업의 단위"}],"\n",["$","p",null,{"children":"SELECT 에선 별로 일어날일 없는데 DELETE, UPDATE 할땐 자주 이런게 필요"}],"\n",["$","p",null,{"children":"DB에서 항상 중요하게 생각하는게 장애가 일어날 경우를 상정함"}],"\n",["$","p",null,{"children":"그리고 동시성도 매우 중요, 컴퓨터 공학과 학생이라면 공유자원 문제에 대해 알고 잇을 것, 그래서 작업을 서로 분리하는 단위가 돼기도 함"}],"\n",["$","h2",null,{"children":"트랜잭션 개념"}],"\n",["$","p",null,{"children":"start transaction 내부에선 업데이트 하기 위한 테이블들을 미리 읽어오게 된다. COMMIT 이 완료 돼어도 버퍼 내부에 변경된 데이터가 실제 DB에 언제 들어갈진 알수 없다. 실제로는 COMMIT 돼도 나중에 들어갈 수 있음"}],"\n",["$","p",null,{"children":"1 - 2 - 3 - 4 - COMMIT - 5 -6"}],"\n",["$","p",null,{"children":"5번 6번이 실제 DB에 올라가는것"}],"\n",["$","p",null,{"children":"왜 이런 방법을 쓰지?"}],"\n",["$","p",null,{"children":"버퍼에 있는 내용을 DB에 집어넣는 과정은 매우 시간이 걸리는 작업, 그리고 1번 사용자, 2번 사용자 순차적으로 저장이 돼서 나중에 저장, 왜냐하면 버퍼에 있는 내용을 다시 쓸수도 있으니, 캐싱으로도 쓸수 있음"}],"\n",["$","p",null,{"children":"COMMI: 개념상 트랜젝션 완료지만 실제 동작은 부분 완료, DBMS에 내부적으로 빈시간이다 판단하면 버퍼의 내용을 실제 DB(disk)에 기록, 그래서 부분 완료라 그럼"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"트랜잭션의 성질, ACID"}],"\n",["$","h2",null,{"children":"원자성(all or nothing)"}],"\n",["$","p",null,{"children":"쪼개면 안됨, 가장 중요"}],"\n",["$","h2",null,{"children":"Consistency(일관성)"}],"\n",["$","p",null,{"children":"뒤에 설명"}],"\n",["$","h2",null,{"children":"고립성(Isolation)"}],"\n",["$","p",null,{"children":"DB는 여러 사람이 사용, 즉 여러 트랜잭션이 존재"}],"\n",["$","h2",null,{"children":"지속성"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"원자성(Atomicty)"}],"\n",["$","p",null,{"children":"easy"}],"\n",["$","p",null,{"children":[["$","code",null,{"children":"SAVEPOINT","className":"overflow-x-auto bg-gray-200 rounded-md px-1 undefined"}]," 개념은 다시 알아바야 할수도, 프로그래밍에서 jump를 자주 쓰면 안좋듯 ROlLBACK,SAVEPOINT는  가능하면 줄이는게 안전"]}],"\n",["$","h1",null,{"children":"일관성"}],"\n",["$","p",null,{"children":"추후 엄청 자세하게 하겠지만 일단 이정도"}],"\n",["$","p",null,{"children":"예제에서 나오듯 이전 이후의 sum이 같아야 한다는게 아니라, 이치에 맞아야함, 우리의 의도가 둘다 정확해야함"}],"\n",["$","p",null,{"children":"CREATE TABLE 할때 어느 속성은 0 이상이여야 하고.. 등, 무결성 제약조건도 사실 일관성을 위한 작업이라 할 수 있음"}],"\n",["$","h1",null,{"children":"고립성(Isolation)"}],"\n",["$","p",null,{"children":"overwrite 방지, 트랜잭션 통제"}],"\n",["$","p",null,{"children":"DBMS를 마치 나 혼자 쓰는것처럼 느껴져야 함, DBMS가 해주지"}],"\n",["$","h1",null,{"children":"지속성"}],"\n",["$","p",null,{"children":"부분 완료 후 버퍼내용을 disk에 기록해야 하는데 부분완료 돼었지만 disk에 기록이 안됄수도 있음(실패)"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","p",null,{"children":"여기까지가 개념"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"동시성 제아(en)"}],"\n",["$","p",null,{"children":"여서부터 복잡"}],"\n",["$","p",null,{"children":"DBMS 내부의 기능중 하나"}],"\n",["$","p",null,{"children":"트랜잭션이 동시에 수행될 때, 일관성을 해치지 않도록 트랜잭션의 데이터 접근을 제어하는기능"}],"\n",["$","p",null,{"children":"TODO: 동시성 제어 개념표 필요"}],"\n",["$","p",null,{"children":"표"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"트랜잭션 2개 존재 가정"}],"\n",["$","li",null,{"children":"서로 상관없는 테이블을 활용하면 상관없음, 하지만 같은 테이블이면 문제"}],"\n",["$","li",null,{"children":"읽기, 읽기: 아무 상관 없음"}],"\n",["$","li",null,{"children":["일기, 쓰기: 읽어간데이터를 누군가 쓰면 읽어간 데이터아 달라질수 있음","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"케이스가 3개 존재, 허용/불가 중 선택, 옵션임, 나중에 자세히 함"}],"\n"],"className":"list-disc ml-4"}],"\n"]}],"\n",["$","li",null,{"children":"쓰기, 쓰기: 가장 긴급한 상황, 어떤 트랜잭션이 쓴 내용이 없어지는 갱싱 손실 발생, 허용불가(LOCK) 필요"}],"\n"],"className":"list-disc ml-4"}],"\n",["$","h2",null,{"children":"갱신 손실(lost update)"}],"\n",["$","p",null,{"children":"같은 데이터를 여러 트랜잭션이 쓰려고 하는 상황"}],"\n",["$","p",null,{"children":"같은 테이블의 같은 속성일수도 같은 튜플일수도 있음"}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"EXAMPLE"}]}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":["트랜잭션 T1, T2","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"T1은 예금을 인출(UPDATE) 하는 작업"}],"\n",["$","li",null,{"children":"T2는 입금(UPDATE) 하는 작업"}],"\n"],"className":"list-disc ml-4"}],"\n"]}],"\n",["$","li",null,{"children":["T1은 계좌 x에서 100을 빼고, T2는 계좌 x에 100을 더함","\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"서로의 트랜잭션을 서로 DB에 요청해서 재수없게 딱 걸린 상황"}],"\n"],"className":"list-disc ml-4"}],"\n"]}],"\n",["$","li",null,{"children":"초기에 x의 값이 1000이라면 T1 -) t2 혹은 T2 -) T1 어느 순서로 실행해도  결과는 x = 1000"}],"\n",["$","li",null,{"children":"이 경우 일관성의 조건은 어떤 경우라도 x의 값이 1000 이여야 하는것"}],"\n"],"className":"list-disc ml-4"}],"\n",["$","p",null,{"children":["$","strong",null,{"children":"내부 시나리오"}]}],"\n",["$","p",null,{"children":"TODO: 표 다시 써야함"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"A = read(x) # 버퍼의 데이터 값 x = 1000"}],"\n",["$","li",null,{"children":"A = A - 100 # 이 순간 스위칭 발생"}],"\n",["$","li",null,{"children":"B = read(x)"}],"\n",["$","li",null,{"children":"B = B + 100 # 버퍼의 데이터 값 = 1000"}],"\n",["$","li",null,{"children":"write(A -> x) x = 900"}],"\n",["$","li",null,{"children":"write(B -> x) x = 1100"}],"\n"],"className":"list-decimal ml-4"}],"\n",["$","p",null,{"children":"이 때문에 Lock이라는 개념이 등장, 운영체제의 임계영역, 세마포어랑 비슷한 개념"}],"\n",["$","p",null,{"children":"사실 Network랑 별 상관 없음, target netweork라 말하지만 사실 펑션 어프로시 메이트로 고정시키는 방법과똑같, 사용한 network는ㄴ 이미지 처리를 위한 네트워크 하나"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"동시성 제어"}],"\n",["$","p",null,{"children":"트랜잭션 여러개가 돌아가는데 서로 같은데이터를 참조할때 일관성을 해치지 않도록트랜잭션"}],"\n",["$","p",null,{"children":"트론잭션을 어떻게보면 process라 볼수 있음"}],"\n",["$","h2",null,{"children":"쓰기 쓰기: 락"}],"\n",["$","p",null,{"children":"세마포어와 거의 같은 개념"}],"\n",["$","p",null,{"children":"쓸려고 할때 내 데이터에 자물쇠를 잠가버리고 키를 안주고 쓴다음 풀고 다른사람에게 키를 줌"}],"\n",["$","p",null,{"children":"키 관리는 DBMS의 역할"}],"\n",["$","p",null,{"children":"이것이 락의 기본 개념"}],"\n",["$","h3",null,{"children":"example"}],"\n",["$","p",null,{"children":"TODO: 예시 테이블 작성"}],"\n",["$","p",null,{"children":"엄밀하겐 T1이 끝나고 T2가 시작돼진 않고 왔다갔다 하면서 스케줄을 맞쳐준다? 뭔소리지"}],"\n",["$","p",null,{"children":"일관성과 고립성을 확실히 지켜질수 있음"}],"\n",["$","p",null,{"children":"80년대 90년대 동시성을 제어하기 위한 여러 방법이 재시돼었지만 락이 가장 대표적이고 오라클도 락을 사용"}],"\n",["$","p",null,{"children":"실제 트랜잭션에선 락이 존재하기 때문에 한 트랜잭션을 만들때는 시간이 최대한 덜걸리게 해야 한다. select 같은건 쓰면 안됨"}],"\n",["$","p",null,{"children":"이로서 쓰기 쓰기 문제 해결"}],"\n",["$","h2",null,{"children":"락의 유형"}],"\n",["$","p",null,{"children":"공유략, 배타락이 존재"}],"\n",["$","p",null,{"children":"이전에 에기했던건 배타락이라 그럼, LX 상태라면 LS, LX 요청에 의한 읽고, 쓰기를 전부 차단, 원래 이렇게 하는게 맞음"}],"\n",["$","p",null,{"children":"근데 이렇게 하드한 락을 걸어놓니 성능 문제가 발생"}],"\n",["$","p",null,{"children":"그래서 LS 락이 존재, LS 락에선 읽기를 허용함, 동시성을 높이기 위한 트레이드 오프, LS락은 읽는 락임, 읽느 요청을 하면 LS 락을 검, ls락에서도 쓰기는 차단됨"}],"\n",["$","p",null,{"children":"동시성을 위해 읽는락, 쓰기락을 나눠서 처리함"}],"\n",["$","h2",null,{"children":"2단계 락킹"}],"\n",["$","p",null,{"children":"락을 사용하되 2단계 락킹 기법을 사용하지 않을경우 발생할수 있는 문제"}],"\n",["$","p",null,{"children":"TODO: 아니 가운데 의사 코드에서 왜 락이 저절로 풀어져?"}],"\n",["$","p",null,{"children":"솔루션: 트랜젝션이 끝날때 락을 품;;모  여러개 락을 가질순 있지만 이먼"}],"\n",["$","p",null,{"children":"TODO: 테이블 필요"}],"\n",["$","h2",null,{"children":"데드락"}],"\n",["$","p",null,{"children":"쓰기쓰기 문제에서 생기는 문제"}],"\n",["$","p",null,{"children":"Os에서의 데드락이 그대로 나온거임"}],"\n",["$","p",null,{"children":"Todo: table example"}],"\n",["$","p",null,{"children":"누굴 하날 죽이는것밖에 답이 없음"}],"\n",["$","p",null,{"children":"누구 때문에 교착상태가 발생한지 모르기 대문에 둘중 하나가 죽음, 죽엇다는것은 롤백 됀다는 뜻임, 나머지 한쪼근 교착상태가 있는주 모르고계속 실행, 죽은애를 다시 실행해주는 기능은 없음"}],"\n",["$","p",null,{"children":"지금까지 한게 쓰기쓰기임"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","p",null,{"children":"락이란건 기본적으로 동시성을 해치는 행위, 극단적으로 해석하면 동시성 생각 안하고 q에 놔서 선입선출 하면 됨"}],"\n",["$","p",null,{"children":"쓰기 읽기 시작"}],"\n",["$","h1",null,{"children":"dirty read(오손 읽기)"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"T1: 읽기"}],"\n",["$","li",null,{"children":"T2: 쓰기"}],"\n"],"className":"list-disc ml-4"}],"\n",["$","p",null,{"children":"실제 내부적으로 실행되는 예시"}],"\n",["$","p",null,{"children":"T2가 갑자기 무슨 일이 생겨서 롤백됏을때 예시, 이 예시는 30이 맞는 데이터고 21이 틀린 데이터, T2가 21로 수정하다 틀린 데이터라 롤백했지만 T1이 틀린데이터인 21을 읽어들인 상황"}],"\n",["$","p",null,{"children":"TODO: 예시 table 필요"}],"\n",["$","p",null,{"children":"근데 이런 생각 할수도 있음, 굳이 막아야 할까? 개발자가 상관 없으니 ㄱㅊ다! 할수도 있는데, 군사목적 같이 무조건 맞아야 한다면 어떨까?"}],"\n",["$","h2",null,{"children":"반복불가능 읽기"}],"\n",["$","p",null,{"children":"내부적으로 T1은 읽고 T2는 업데이트 함 그리고 커밋 함, 그리고 T1이 다시 읽음, 이런 상황 가정"}],"\n",["$","p",null,{"children":"T1은 2번 읽는데 처음 읽는것과 두번째 읽은게 다름, 어떻게 보면 논리적으로 정상적인 상황일수도 있음"}],"\n",["$","p",null,{"children":"이또한 문제가 된다면 막아야 함"}],"\n",["$","p",null,{"children":"위는 ROLLBACK이 문제라면 이번엔 COMMIT 때문에 문제 발생"}],"\n",["$","h2",null,{"children":"유령 데이터 읽기"}],"\n",["$","p",null,{"children":"T1은 읽고 T2가 INSERT 하는 상황, 이후 T1이 다시 읽을시 생기는 상황"}],"\n",["$","p",null,{"children":"처음 읽을때의 결과와 두번째읽을때 결과의 튜플의개수가 다름"}],"\n",["$","p",null,{"children":"유령같이생겨서 팬텀"}],"\n",["$","p",null,{"children":"위 가지는 저부 고립성이 깨진 상황"}],"\n",["$","p",null,{"children":"위 3가지는 절대적인게 아님, 허용 할수도 있음, 쓰기 쓰기 는 절대임!"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"막기 위한 방법"}],"\n",["$","h2",null,{"children":"트랜잭션 고립 수준명령어"}],"\n",["$","p",null,{"children":"이전엔 시작과 끝만 선언했다면 이제 추가적인 명령어 써야함"}],"\n",["$","p",null,{"children":"TODO: 표 필요"}],"\n",["$","p",null,{"children":"근데 이론적으론 이런데 오라클은 2가ㅣ만 지원함, DB마다 다름"}],"\n",["$","p",null,{"children":"LEVEL READ UNCOMMITTEd 를 선언하면 돼야 하지만 오라클이 지원 안함"}],"\n",["$","p",null,{"children":"아무것도 안붙이면 처음 빨간거"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","p",null,{"children":"어떻게 막았을까? 제일 어려운 예기"}],"\n",["$","h1",null,{"children":"Read UNCIMMITTED, LEVER = 0"}],"\n",["$","p",null,{"children":"읽기 할때 아무런 락을 안걸음"}],"\n",["$","p",null,{"children":"그 이후 쓰기가 락을걸고 수정을 하고 다시 읽기를 함"}],"\n",["$","p",null,{"children":"읽는게  아무런락 을 걸지 않았기에 T2가 맘대로 사용 가능"}],"\n",["$","h1",null,{"children":"READ COMMITTEd"}],"\n",["$","p",null,{"children":"읽기 할시 공유럭을 검 끝나면 바로 해지"}],"\n",["$","p",null,{"children":"첫번째 읽기시 락 걸고 푼다음 쓰기 다시 두번째 읽기 시 공유락을 다시 검,쓰기를 위한 T2는 베타락을 거는건 당연"}],"\n",["$","p",null,{"children":"이전표를보면 쓰기를 할시 누가 읽기락을 걸어놓고 있으면 대기하게 됨"}],"\n",["$","p",null,{"children":"OS의 스케줄링과 비슷함"}],"\n",["$","p",null,{"children":"T2가 롤벨해도 전혀 상관 없음"}],"\n",["$","h1",null,{"children":"레벨 2"}],"\n",["$","p",null,{"children":"읽시 시 공유락 걸고 끝날때 까지 유지"}],"\n",["$","p",null,{"children":"위와 무슨 차이? 락을 최대한 안걸기 위한 노력임"}],"\n",["$","h1",null,{"children":"시리얼라이즈"}],"\n",["$","p",null,{"children":"아주 강력"}],"\n",["$","p",null,{"children":"역시 읽기가 문제, 공유락을 걸고 트랜잭션 끝까지 유지, 이건 위와는 독같음"}],"\n",["$","p",null,{"children":"베타락 설정한ㄴ것도똑같음"}],"\n",["$","p",null,{"children":"인서트 문이라 발생하는 문제임"}],"\n",["$","p",null,{"children":"다른건"}],"\n",["$","p",null,{"children":"인덱스에 공유락을 검"}],"\n",["$","p",null,{"children":"좀 어려운 예기긴 한데.."}],"\n",["$","p",null,{"children":"일단 읽기 쓰기 읽기 할시 T1은 끝날때까지  LS 를 검"}],"\n",["$","p",null,{"children":"인서트하는 튜플은없는 객체기 때문에 Lx를 걸수가 없음"}],"\n",["$","p",null,{"children":"예전에 봤는데 각 튜플을 가리키는 인덱스 라는 개념을 말했음, 도한 PK는  자동으로 인덱스가 붙음"}],"\n",["$","p",null,{"children":"그리고 이러한 인덱스는 물리적인 파일로디스크에 저장되어 있음"}],"\n",["$","p",null,{"children":"여기ㅓ 예기 하고자 하는 예기는 새로운 튜플을 인서트할시 해당 테이블에만 인서트 하냐? 아님 인덱스에도 추가해야함"}],"\n",["$","p",null,{"children":"그래서 여기서 말하고자 하는건 이 인덱스에 공유락을 걸어버리는거임, 이렇게 하면 INSERT 는 INDEX를 건드려야하는데 인덱스 파일자체에락이 걸려있으니 대기가 발생, 언제까지?"}],"\n",["$","p",null,{"children":"T1이 커밋이 될때까지"}],"\n",["$","p",null,{"children":"인덱스가 뒤로 밀린다? 뭔 말이지"}],"\n",["$","p",null,{"children":"락킹 말고도 여러 방법이 고안돼었긴 했는데 살아남은건 락킹이 거의 유일하다 보면 됨"}],"\n",["$","p",null,{"children":"근데 락을 쓰면 데드락이 발생할 수 있음"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"실험"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"회복(recovery)"}],"\n",["$","p",null,{"children":"지금 예기하는 화복도 있는데 제일 마지막에 복원이란 파트가 있음, 이것도 회복이라 할수 있음, 잠시 예기해주면 디스크가 깨지는 경우를 예기함"}],"\n",["$","p",null,{"children":"지금 예기하는건 전원같은게 나가가지고 트랜젝션이 깨지는 경우를 예기함"}],"\n",["$","p",null,{"children":"즉 DB에 장애가 발생해도 일관성을 유지하는것이 recovery 임"}],"\n",["$","p",null,{"children":"트랜잭션은 기본적으로 All or Not 임"}],"\n",["$","p",null,{"children":"이때 중간에 오류가 생겨서 뒤로 돌아가려 할 상황이 발생하면뒤로 돌아가야 함,이때 로그파일을 씀"}],"\n",["$","p",null,{"children":"일단 DB 시스템에서 발생하 수 있는 장애 유형부터 알아보자"}],"\n",["$","h2",null,{"children":"장애 유형"}],"\n",["$","p",null,{"children":"완벽히 나누어 지는건 아니고 이런걸 생각할 수 있음"}],"\n",["$","ul",null,{"children":["\n",["$","li",null,{"children":"시스템 충돌: HW, SW의 오류로 인해 RAM의 정보다 손실되어, RAM에 상주해 있던 프로그램과 데이터가 손실, 가장 흔한 상태임"}],"\n",["$","li",null,{"children":"미디어 장애: 이것도 일종의 HW의 장애일수도 있음"}],"\n",["$","li",null,{"children":"완벽한 SW란 있을순 없으니... os에도 에러가 발생할 수 있음"}],"\n",["$","li",null,{"children":"자연재해"}],"\n",["$","li",null,{"children":"부주의 혹은 태업: 사람이 실수로 컴퓨터 끌수도 있음"}],"\n"],"className":"list-disc ml-4"}],"\n",["$","h2",null,{"children":"다이어그램"}],"\n",["$","h2",null,{"children":"로그파일"}],"\n",["$","p",null,{"children":["트랜잭션이 반영한 모든 데이터의 ",["$","strong",null,{"children":"변경 사항"}],"을 DB에 기록하기 변경하기 ",["$","strong",null,{"children":"전에"}]," 미리 기록해두는 별도의 데이터 베이스, 읽는건 상관없음"]}],"\n",["$","p",null,{"children":"기록한 후에 기록하지 않음, 그리고 이또한 DB임"}],"\n",["$","p",null,{"children":"근데 DB도 디스크에저장돼고 로그도 디스크에 저장돼는건 뭔가 이상함, 디스크 뽀개지면 끝이자나"}],"\n",["$","p",null,{"children":"로그파일은 별도의 저장장치, 보다 안전힌 디스크에 저장됨, 물론 실습으로 쓰는 개인 컴퓨터로 쓰면 같은 디스크에 저장돼고, 은행 같은곳에선 이렇게 함 사실 대부분 하나의 디스크로 처리하긴 함"}],"\n",["$","h3",null,{"children":"로그의 구조"}],"\n",["$","p",null,{"children":"인서트라면 어떤 테이블에 어떤 튜플이 추가돼었단 정보가 있겠지"}],"\n",["$","h2",null,{"children":"로그 파일을 이용한 회복"}],"\n",["$","p",null,{"children":"UPDATE 는 사실 read 와 write의 조합이기 때문에 엄밀힌 틀렸지만 편의상 이렇게 보겠다."}],"\n",["$","p",null,{"children":"TODO: 67page"}],"\n",["$","p",null,{"children":"핵심은 read 될때가 아닌 wriet 돼기 전 로그에 적힌다는 거다."}],"\n",["$","p",null,{"children":"TODO: 69page"}],"\n",["$","p",null,{"children":"이때 특정 로그번호에서 죽었다 가정 하자 이때 T2 중간에 꺼졌다면 10번의 COMMIT 기록은 없을거다. COMMIT이 적혀있어도 사실 COMMIT이 돼있다고 할수도 없다."}],"\n",["$","p",null,{"children":"이제 다시 컴퓨터를 켜서 ㄱ동되면 DBMS는 로그파일을 먼저 살펴본다...."}],"\n",["$","p",null,{"children":"이때 트랜잭션을 복구하는 방법은 2가지다,"}],"\n",["$","h3",null,{"children":"REDO"}],"\n",["$","p",null,{"children":"이전에 COMMIT이 돼 있어도 또 적는다. COMMIT이 돼 있다면 뒤에있는 값(여기선 10이 더해진 값)으로 다시 적는다. 확인사살을 한다 생각해도 괜찮다."}],"\n",["$","h3",null,{"children":"UNDO"}],"\n",["$","p",null,{"children":"COMMIT이 없는 경우다. 이때는  NOTHING로 만들어야 한다. 위 예제에선 7번까지 적혀있는 경우다. 이땐 REDO가 불가능하니 NOTHING로 만들어 버린다. 이때 방법은 OLD값으로 써주면 돼니 쉽다."}],"\n",["$","h2",null,{"children":"커밋의 타이밍"}],"\n",["$","p",null,{"children":"이전에 커밋을 해도 disk에 안써질수 있다 했다. 성능 이슈 때문에.. 근데 이때 커밋을 언제 할지에 따라서 로그를 쓰는 방법도 달라진다."}],"\n",["$","p",null,{"children":"이를 구분해 즉시 갱신 방법과 지연 갱신 방법 두가지로 나뉜다."}],"\n",["$","p",null,{"children":"근데 이때 디스크에 저장 한다음  COMMIT 하는 방법을 사용한다 해도 사실 disk에 넣는건 OS의 역할인데.. 이 OS도 디스크에 바로 작성하는게 아니라 이 경우에도 COMMIT 시 반드시 disk에 있다 생각할순 없다. 참.. 뭣같네"}]]]}]}]

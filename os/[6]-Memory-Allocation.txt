3:I[9275,[],""]
6:I[1343,[],""]
8:I[231,["217","static/chunks/578c2090-c1b891f3b6c746fd.js","675","static/chunks/b563f954-758761ebc4ecc2e7.js","699","static/chunks/8e1d74a4-44e18cb83de8b273.js","779","static/chunks/0e762574-0fedad6633d82a8a.js","231","static/chunks/231-87925b9c7247c60f.js","874","static/chunks/app/%5Bsubject%5D/layout-39e3ee08b07e17b8.js"],""]
4:["subject","os","d"]
5:["post","%5B6%5D-Memory-Allocation","d"]
0:["_Uq8kYzLoglmsBwp13Ej6",[[["",{"children":[["subject","os","d"],{"children":[["post","%5B6%5D-Memory-Allocation","d"],{"children":["__PAGE__?{\"subject\":\"os\",\"post\":\"[6]-Memory-Allocation\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":[["subject","os","d"],{"children":[["post","%5B6%5D-Memory-Allocation","d"],{"children":["__PAGE__",{},[["$L1","$L2"],null],null]},["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/dd89e605550f760e.css","precedence":"next","crossOrigin":"$undefined"}]]}],null]},["$L7",null],null]},[["$","html",null,{"lang":"ko","children":["$","body",null,{"className":"__className_1e1d11 min-h-screen","children":["$","div",null,{"className":"grid grid-cols-[24rem_1fr] auto-rows-auto","children":[["$","nav",null,{"className":"bg-white w-full h-14 flex items-center justify-between pl-5 pr-5 mb-20 border-b-2 border-b-slate-300 text-2xl fixed","children":[["$","$L8",null,{"href":"/","children":"tomatoM4to's blog"}],["$","div",null,{"className":"hidden lg:flex items-center","children":[["$","input",null,{"type":"text","className":"w-36 h-7 rounded-full border-2 border-black pl-2","placeholder":"search"}],["$","div",null,{"className":"bg-slate-300 h-10 w-0.5 ml-2"}],["$","$L8",null,{"href":"https://github.com/tomatoM4to/tomatoM4to.github.io","className":"p-2 rounded-full hover:bg-gray-300 transition-colors duration-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 16 16","className":"text-2xl cursor-pointer","children":["$undefined",[["$","path","0",{"fillRule":"evenodd","clipRule":"evenodd","d":"M7.976 0A7.977 7.977 0 0 0 0 7.976c0 3.522 2.3 6.507 5.431 7.584.392.049.538-.196.538-.392v-1.37c-2.201.49-2.69-1.076-2.69-1.076-.343-.93-.881-1.175-.881-1.175-.734-.489.048-.489.048-.489.783.049 1.224.832 1.224.832.734 1.223 1.859.88 2.3.685.048-.538.293-.88.489-1.076-1.762-.196-3.621-.881-3.621-3.964 0-.88.293-1.566.832-2.153-.05-.147-.343-.978.098-2.055 0 0 .685-.196 2.201.832.636-.196 1.322-.245 2.007-.245s1.37.098 2.006.245c1.517-1.027 2.202-.832 2.202-.832.44 1.077.146 1.908.097 2.104a3.16 3.16 0 0 1 .832 2.153c0 3.083-1.86 3.719-3.62 3.915.293.244.538.733.538 1.467v2.202c0 .196.146.44.538.392A7.984 7.984 0 0 0 16 7.976C15.951 3.572 12.38 0 7.976 0z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}],["$","button",null,{"className":"p-2 rounded-full hover:bg-gray-300 transition-colors duration-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 24 24","className":"text-2xl cursor-pointer","children":["$undefined",[["$","path","0",{"fill":"none","strokeWidth":"2","d":"M12,23 C18.0751322,23 23,18.0751322 23,12 C23,5.92486775 18.0751322,1 12,1 C5.92486775,1 1,5.92486775 1,12 C1,18.0751322 5.92486775,23 12,23 Z M12,23 C15,23 16,18 16,12 C16,6 15,1 12,1 C9,1 8,6 8,12 C8,18 9,23 12,23 Z M2,16 L22,16 M2,8 L22,8","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}],["$","button",null,{"className":"p-2 rounded-full hover:bg-gray-300 transition-colors duration-300","children":["$","svg",null,{"stroke":"currentColor","fill":"currentColor","strokeWidth":"0","viewBox":"0 0 16 16","className":"text-2xl cursor-pointer","children":["$undefined",[["$","path","0",{"d":"M6 .278a.77.77 0 0 1 .08.858 7.2 7.2 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277q.792-.001 1.533-.16a.79.79 0 0 1 .81.316.73.73 0 0 1-.031.893A8.35 8.35 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.75.75 0 0 1 6 .278","children":[]}],["$","path","1",{"d":"M10.794 3.148a.217.217 0 0 1 .412 0l.387 1.162c.173.518.579.924 1.097 1.097l1.162.387a.217.217 0 0 1 0 .412l-1.162.387a1.73 1.73 0 0 0-1.097 1.097l-.387 1.162a.217.217 0 0 1-.412 0l-.387-1.162A1.73 1.73 0 0 0 9.31 6.593l-1.162-.387a.217.217 0 0 1 0-.412l1.162-.387a1.73 1.73 0 0 0 1.097-1.097zM13.863.099a.145.145 0 0 1 .274 0l.258.774c.115.346.386.617.732.732l.774.258a.145.145 0 0 1 0 .274l-.774.258a1.16 1.16 0 0 0-.732.732l-.258.774a.145.145 0 0 1-.274 0l-.258-.774a1.16 1.16 0 0 0-.732-.732l-.774-.258a.145.145 0 0 1 0-.274l.774-.258c.346-.115.617-.386.732-.732z","children":[]}]]],"style":{"color":"$undefined"},"height":"1em","width":"1em","xmlns":"http://www.w3.org/2000/svg"}]}]]}]]}],["$","main",null,{"className":"col-span-2","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ea9287ddd32ae283.css","precedence":"next","crossOrigin":"$undefined"}]]}]}]]}]}]}],null],null],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/40f13b8fccf4d106.css","precedence":"next","crossOrigin":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/10abd2b3b9bafb32.css","precedence":"next","crossOrigin":"$undefined"}]],"$L9"]]]]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=yes"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"tomatom4to's Computer Science Blog"}],["$","meta","3",{"name":"description","content":"Comprehensive computer science knowledge covering OS, Database, AI, Networks, Linux, and Docker. Learn computer science concepts with clear explanations and practical examples."}],["$","meta","4",{"name":"author","content":"tomatom4to"}],["$","meta","5",{"name":"keywords","content":"Computer Science,Operating Systems,Database,AI,Network,Linux,Docker,Programming,Software Development"}],["$","meta","6",{"name":"creator","content":"tomatom4to"}],["$","meta","7",{"name":"robots","content":"index, follow"}],["$","meta","8",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","link","9",{"rel":"canonical","href":"https://tomatom4to.github.io"}],["$","meta","10",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","11",{"property":"og:title","content":"tomatom4to's Computer Science Blog"}],["$","meta","12",{"property":"og:description","content":"Your gateway to comprehensive computer science knowledge and practical programming skills"}],["$","meta","13",{"property":"og:url","content":"https://tomatom4to.github.io"}],["$","meta","14",{"property":"og:site_name","content":"tomatom4to's CS Blog"}],["$","meta","15",{"property":"og:locale","content":"ko_KR"}],["$","meta","16",{"property":"og:type","content":"website"}],["$","meta","17",{"name":"twitter:card","content":"summary"}],["$","meta","18",{"name":"twitter:title","content":"tomatom4to's Computer Science Blog"}],["$","meta","19",{"name":"twitter:description","content":"Your gateway to comprehensive computer science knowledge and practical programming skills"}],["$","link","20",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","21",{"name":"next-size-adjust"}]]
1:null
a:I[1815,["217","static/chunks/578c2090-c1b891f3b6c746fd.js","675","static/chunks/b563f954-758761ebc4ecc2e7.js","699","static/chunks/8e1d74a4-44e18cb83de8b273.js","779","static/chunks/0e762574-0fedad6633d82a8a.js","231","static/chunks/231-87925b9c7247c60f.js","874","static/chunks/app/%5Bsubject%5D/layout-39e3ee08b07e17b8.js"],"Hamburger"]
7:["$","div",null,{"className":"flex","children":[["$","$La",null,{"res":[{"isOutLine":false,"firstOrder":1,"secondOrder":-1,"order":"1","title":"Computer System Overview","originalName":"[1]-Computer-System-Overview"},{"isOutLine":false,"firstOrder":2,"secondOrder":-1,"order":"2","title":"OS Overview","originalName":"[2]-OS-Overview"},{"isOutLine":false,"firstOrder":3,"secondOrder":-1,"order":"3","title":"Process Management","originalName":"[3]-Process-Management"},{"isOutLine":true,"firstOrder":3,"secondOrder":1,"order":"3-1","title":"Process Scheduling","originalName":"[3-1]-Process-Scheduling"},{"isOutLine":true,"firstOrder":3,"secondOrder":2,"order":"3-2","title":"Process Synchronization","originalName":"[3-2]-Process-Synchronization"},{"isOutLine":true,"firstOrder":3,"secondOrder":3,"order":"3-3","title":"Deadlock","originalName":"[3-3]-Deadlock"},{"isOutLine":false,"firstOrder":4,"secondOrder":-1,"order":"4","title":"Thread Management","originalName":"[4]-Thread-Management"},{"isOutLine":false,"firstOrder":5,"secondOrder":-1,"order":"5","title":"Memory overview","originalName":"[5]-Memory-overview"},{"isOutLine":false,"firstOrder":6,"secondOrder":-1,"order":"6","title":"Memory Allocation","originalName":"[6]-Memory-Allocation"},{"isOutLine":false,"firstOrder":7,"secondOrder":-1,"order":"7","title":"Virtual Memory","originalName":"[7]-Virtual-Memory"},{"isOutLine":true,"firstOrder":7,"secondOrder":1,"order":"7-1","title":"Paging1","originalName":"[7-1]-Paging1"},{"isOutLine":true,"firstOrder":7,"secondOrder":2,"order":"7-2","title":"Paging2","originalName":"[7-2]-Paging2"},{"isOutLine":true,"firstOrder":7,"secondOrder":3,"order":"7-3","title":"Segmentation","originalName":"[7-3]-Segmentation"},{"isOutLine":false,"firstOrder":8,"secondOrder":-1,"order":"8","title":"Disk System","originalName":"[8]-Disk-System"},{"isOutLine":false,"firstOrder":9,"secondOrder":-1,"order":"9","title":"File System Overview","originalName":"[9]-File-System-Overview"},{"isOutLine":false,"firstOrder":10,"secondOrder":-1,"order":"10","title":"all in one","originalName":"[10]-all-in-one"}],"params":{"subject":"os"}}],["$","aside",null,{"className":"hidden lg:flex w-64 2xl:w-96 flex-col h-screen border-r-2 border-gray-300 mt-14 p-1 pl-5 fixed overflow-y-auto overscroll-contain","children":[["$","$L8",null,{"href":"/os/[1]-Computer-System-Overview","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["1",". ","Computer System Overview"]}],["$","$L8",null,{"href":"/os/[2]-OS-Overview","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["2",". ","OS Overview"]}],["$","$L8",null,{"href":"/os/[3]-Process-Management","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3",". ","Process Management"]}],["$","$L8",null,{"href":"/os/[3-1]-Process-Scheduling","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-1",". ","Process Scheduling"]}],["$","$L8",null,{"href":"/os/[3-2]-Process-Synchronization","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-2",". ","Process Synchronization"]}],["$","$L8",null,{"href":"/os/[3-3]-Deadlock","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["3-3",". ","Deadlock"]}],["$","$L8",null,{"href":"/os/[4]-Thread-Management","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["4",". ","Thread Management"]}],["$","$L8",null,{"href":"/os/[5]-Memory-overview","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["5",". ","Memory overview"]}],["$","$L8",null,{"href":"/os/[6]-Memory-Allocation","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["6",". ","Memory Allocation"]}],["$","$L8",null,{"href":"/os/[7]-Virtual-Memory","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["7",". ","Virtual Memory"]}],["$","$L8",null,{"href":"/os/[7-1]-Paging1","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["7-1",". ","Paging1"]}],["$","$L8",null,{"href":"/os/[7-2]-Paging2","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["7-2",". ","Paging2"]}],["$","$L8",null,{"href":"/os/[7-3]-Segmentation","className":"pl-4 px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["7-3",". ","Segmentation"]}],["$","$L8",null,{"href":"/os/[8]-Disk-System","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["8",". ","Disk System"]}],["$","$L8",null,{"href":"/os/[9]-File-System-Overview","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["9",". ","File System Overview"]}],["$","$L8",null,{"href":"/os/[10]-all-in-one","className":"undefined px-2 py-1 mb-1 hover:bg-gray-300 transition-colors rounded-lg","onClick":"$undefined","children":["10",". ","all in one"]}]]}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]}]
2:["$","div",null,{"className":"lg:ml-64 2xl:ml-96 mt-32 mb-32 flex-1 flex flex-col items-center overflow-x-hidden","children":["$","div",null,{"className":"w-11/12 md:w-3/4 lg:w-2/3 2xl:w-1/2 markdown-body","children":[["$","h1",null,{"children":"Memory Allocation"}],"\n",["$","p",null,{"children":"이름 그대로 Memory를 어떻게 Process에게 Allocation 할지에 대한 이야기다."}],"\n",["$","h4",null,{"children":"Continuous Memory Allocation - 연속할당"}],"\n",["$","p",null,{"children":["Process(context)를 ",["$","span",null,{"style":{"color":"red"},"children":"하나의 연속된 메모리 공간"}],"에 할당하는 정책이다, 자연스럽게 Program, data, stack 등이 포함된다."]}],"\n",["$","p",null,{"children":"그리고 프로그램 전체가 한번에 Memory에 올라가야 한다."}],"\n",["$","p",null,{"children":"한 Process가 있을때 이 Process가 그대로 Memory 공간에 올라가는 이미지를 그리면 된다."}],"\n",["$","p",null,{"children":"CMA 정책을 적용할때 생각해봐야 할 문제들은 다음과 같다."}],"\n",["$","h4",null,{"children":"문제점"}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"메모리에 동시에 올라갈 수 있는 Process 수"}],"\n",["$","li",null,{"children":"각 Process에게 할당되는 Memory 공간 크기"}],"\n",["$","li",null,{"children":"Memory 분할 방법"}],"\n"],"className":"list-decimal ml-4"}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"Uni programming"}],"\n",["$","p",null,{"children":["dsddd\n",["$","img",null,{"src":"./img/Memory-Allocation/Continuous-Memory-Allocation.png","alt":"Continuous Memory Allocation"}]]}],"\n",["$","p",null,{"children":["Multiprogramming degree 가 1인 경우, 즉 한번에 ",["$","span",null,{"style":{"color":"red"},"children":"하나의 Process만 올라가는 경우"}],"를 의미한다. 가장 간단한 메모리 관리 기법이기도 하다."]}],"\n",["$","p",null,{"children":["하지만 이때 ",["$","code",null,{"children":"프로그램의 크기 > 메모리 크기","className":"overflow-x-auto bg-gray-200 rounded-md px-1 undefined"}]," 인 경우, 프로세스가 Kernel을 침범할 가능성 등을 고려해야 한다."]}],"\n",["$","h4",null,{"children":"Kernel 보호"}],"\n",["$","p",null,{"children":"Boundary register에 Kernel의 경계가 돼는 지점의 Address를 저장해, Kernel을 침범하는것을 막을수 있다."}],"\n",["$","h3",null,{"children":"Overlay structure"}],"\n",["$","p",null,{"children":["이 때 공통된 영역만 Memory에 적재하고 공통돼지 않은부분은 구분해서 따로따로 번갈아가면서 적재하는 기법인 ",["$","strong",null,{"children":"Overlay structure"}]," 방법을 사용할수 있다."]}],"\n",["$","h4",null,{"children":"문제점"}],"\n",["$","p",null,{"children":["프로그램의 공통된 부분과 그렇지 않은 부분을 고려해 따로따로 적재하는건 OS가 ",["$","strong",null,{"children":"하지 못한다."}]]}],"\n",["$","p",null,{"children":["결국 ",["$","strong",null,{"children":"사용자 혹은 프로그래머가 해야할 일"}],"이다."]}],"\n",["$","p",null,{"children":"즉 사용자 혹은 프로그래머가 프로그램의 흐름 및 자료구조를 완벽히 이해하고 있어야 한다는 단점이 존재한다."}],"\n",["$","p",null,{"children":["하나의 Process만 적재돼니 자연스럽게 나머지 공간은 ",["$","strong",null,{"children":"낭비"}],"돼는 Low system resource utilization, Low system performance 문제점이 존재한다."]}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"Multi programming - Fixed partition"}],"\n",["$","p",null,{"children":["Fixed partition Multi programming 이란 ",["$","span",null,{"style":{"color":"red"},"children":"메모리 공간을 고정된 크기로 미리 분할"}],"해 놓는 기법이다. Uni programming 과 마찬가지로 메모리 관리가 매우 ",["$","strong",null,{"children":"간편"}],"한 편이다."]}],"\n",["$","p",null,{"children":"Process 가 도착하면 각 분할된 partition중 적당한 공간에 적재시키면 된다, 각 프로세스는 하나의 partition에만 들어갈수 있는 구조로 만들어 진다."}],"\n",["$","p",null,{"children":"즉, partition의 수가 Multiprogramming degree의 수가 된다."}],"\n",["$","p",null,{"children":["$","img",null,{"src":"./img/Memory-Allocation/partition.png","alt":"Continuous Memory Allocation"}]}],"\n",["$","h4",null,{"children":"자료구조"}],"\n",["$","p",null,{"children":"Fixed partition Multi programming 을 구현하려면 이러한 구조로 자료구조를 먼저 생각하면 된다."}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"partition"}],["$","th",null,{"children":"start address"}],["$","th",null,{"children":"size"}],["$","th",null,{"children":"current Process ID"}],["$","th",null,{"children":"other fields"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"partition-a"}],["$","td",null,{"children":"a1"}],["$","td",null,{"children":"10MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-b"}],["$","td",null,{"children":"a2"}],["$","td",null,{"children":"10MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-c"}],["$","td",null,{"children":"a3"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"Pid1"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-d"}],["$","td",null,{"children":"a4"}],["$","td",null,{"children":"30MB"}],["$","td",null,{"children":"Pid2"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-e"}],["$","td",null,{"children":"a5"}],["$","td",null,{"children":"50MB"}],["$","td",null,{"children":"Pid3"}],["$","td",null,{"children":"..."}]]}]]}]]}],"\n",["$","h4",null,{"children":"커널 및 사용자 영역 보호"}],"\n",["$","p",null,{"children":"Kernel 뿐만 아니라 각 partition 도 보호해야 한다, 각 partition 마다 Boundary register을 두어 해결할수 있다."}],"\n",["$","h4",null,{"children":"Fragmentation - 단편화"}],"\n",["$","p",null,{"children":["위 그림에서 partition-e 의 크기는 50MB 지만 내부에 적재돼어 있는 Process는 40MB 이다.\n이때 발생하는 10MB 공간은 다른 Process가 사용할수 없는 공간으로 ",["$","strong",null,{"children":"메모리 낭비"}],"가 된다.\n",["$","code",null,{"children":"Partition 크기 > Process 크기","className":"overflow-x-auto bg-gray-200 rounded-md px-1 undefined"}]," 이런 경우를 ",["$","strong",null,{"children":"Internal fragmentation(내부 단편화)"}],"  라고 한다."]}],"\n",["$","p",null,{"children":["위 표에서 남은 메모리 공간의 크기는 ",["$","code",null,{"children":"120MB - 76MB = 44MB","className":"overflow-x-auto bg-gray-200 rounded-md px-1 undefined"}]," 이다.\n이순간, 30MB 크기의 Pid4가 들어오려고 하면 어느 공간에 할당받을수 있을까? 정답은 ",["$","strong",null,{"children":"적재할수 없다."}],"\n이러한 ",["$","code",null,{"children":"남은 메모리 크기 > Process 크기","className":"overflow-x-auto bg-gray-200 rounded-md px-1 undefined"}]," 현상을 ",["$","strong",null,{"children":"External fragmentation(외부 단편화)"}]," 라고 한다."]}],"\n",["$","hr",null,{"className":"border-t-4 border-gray-300 mt-10 mb-10","children":"$undefined"}],"\n",["$","h1",null,{"children":"Multi programming - Variable Partition"}],"\n",["$","p",null,{"children":"파티션이 유동적으로 변화 가능하다 라는 의미다."}],"\n",["$","p",null,{"children":["케이크에 비유를 하면, Fixed partition 방법은 ",["$","strong",null,{"children":"미리 케이크를 잘라놓은 다음"}]," 사람이 오면, 각 사람이 배고픈 만큼 케이크를 알아서 가져가는 것이라면, Variable Partition 은 ",["$","strong",null,{"children":"케이크를 미리 자르지 않고"}],", 사람이 오면 그 사람이 ",["$","strong",null,{"children":"배고픈 만큼 케이크를 잘라 주는"}]," 방식이다."]}],"\n",["$","p",null,{"children":["즉, Variable Partition 방식은 ",["$","strong",null,{"children":"초기엔 Memory 공간 전체가 하나의 영역"}],"이 되며, 프로세스가 Memory를 요청 하면 메모리 공간을 ",["$","strong",null,{"children":"동적으로 분할"}]," 하는 방법이다."]}],"\n",["$","p",null,{"children":["그때그때 딱 맞춰서 Memory를 할당하면 돼니 Internal fragmentation 이 ",["$","strong",null,{"children":"발생하지 않는다."}]]}],"\n",["$","h4",null,{"children":"예시"}],"\n",["$","p",null,{"children":"처음엔 하나였다가 Process가 들어올때 마다 동적으로 partition이 구성돼는것을 볼수 있다, 그러므로 Internal fragmentation 이 존재하지 않는것을 확인할 수 있다."}],"\n",["$","p",null,{"children":["$","img",null,{"src":"./img/Memory-Allocation/Variable-Partition.png","alt":"Continuous Memory Allocation"}]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"partition"}],["$","th",null,{"children":"start address"}],["$","th",null,{"children":"size"}],["$","th",null,{"children":"current Process ID"}],["$","th",null,{"children":"other fields"}]]}]}],["$","tbody",null,{"children":["$","tr",null,{"children":[["$","td",null,{"children":"partition-1"}],["$","td",null,{"children":"u"}],["$","td",null,{"children":"120MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}]}]]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"partition"}],["$","th",null,{"children":"start address"}],["$","th",null,{"children":"size"}],["$","th",null,{"children":"current Process ID"}],["$","th",null,{"children":"other fields"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"partition-1"}],["$","td",null,{"children":"u"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"A"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-2"}],["$","td",null,{"children":"u + 20"}],["$","td",null,{"children":"100MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}]]}]]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"partition"}],["$","th",null,{"children":"start address"}],["$","th",null,{"children":"size"}],["$","th",null,{"children":"current Process ID"}],["$","th",null,{"children":"other fields"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"partition-1"}],["$","td",null,{"children":"u"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"A"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-2"}],["$","td",null,{"children":"u + 20"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"B"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-3"}],["$","td",null,{"children":"u + 40"}],["$","td",null,{"children":"80MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}]]}]]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"partition"}],["$","th",null,{"children":"start address"}],["$","th",null,{"children":"size"}],["$","th",null,{"children":"current Process ID"}],["$","th",null,{"children":"other fields"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"partition-1"}],["$","td",null,{"children":"u"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"A"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-2"}],["$","td",null,{"children":"u + 20"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"B"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-3"}],["$","td",null,{"children":"u + 40"}],["$","td",null,{"children":"40MB"}],["$","td",null,{"children":"C"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-4"}],["$","td",null,{"children":"u + 80"}],["$","td",null,{"children":"40MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}]]}]]}],"\n",["$","table",null,{"children":[["$","thead",null,{"children":["$","tr",null,{"children":[["$","th",null,{"children":"partition"}],["$","th",null,{"children":"start address"}],["$","th",null,{"children":"size"}],["$","th",null,{"children":"current Process ID"}],["$","th",null,{"children":"other fields"}]]}]}],["$","tbody",null,{"children":[["$","tr",null,{"children":[["$","td",null,{"children":"partition-1"}],["$","td",null,{"children":"u"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"A"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-2"}],["$","td",null,{"children":"u + 20"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-3"}],["$","td",null,{"children":"u + 40"}],["$","td",null,{"children":"40MB"}],["$","td",null,{"children":"C"}],["$","td",null,{"children":"..."}]]}],["$","tr",null,{"children":[["$","td",null,{"children":"partition-4"}],["$","td",null,{"children":"u + 80"}],["$","td",null,{"children":"20MB"}],["$","td",null,{"children":"---"}],["$","td",null,{"children":"..."}]]}]]}]]}],"\n",["$","p",null,{"children":["마지막 그림에서 만약 B가 할일을 끝내고 나갈시 ",["$","strong",null,{"children":"파티션이 나누어 졌으면서 아무도 안쓰는 상태"}],"의 Memory가 생기게 된다."]}],"\n",["$","p",null,{"children":"여기서 만약 Process 의 크기가 15MB 인 Process D가 Memory에 들어오려고 할때, 어떤 partition에 배치할까?"}],"\n",["$","p",null,{"children":"혹은 Process의 크기가 50MB인 Process E가 Memory에 들어오려고 한다면 어떻게 배치해야 할까?"}],"\n",["$","h4",null,{"children":"Placement strategies[배치 전략] - First fit"}],"\n",["$","p",null,{"children":["처음부터 순차탐색을 하면서 ",["$","strong",null,{"children":"충분한 크기를 가진 첫 번째 partition"}],"을 선택하는 전략이다. simple하고 overhead가 적은 장점이 있다."]}],"\n",["$","p",null,{"children":"위 그림을 예로 들면 2번 partition에 Process D가 들어가게 될것이다."}],"\n",["$","p",null,{"children":["하지만 그렇게 된다면 2번 partition 에는 5MB의 남은 공간이 발생하게 된다. 이렇게 된다면, 남아있는 5MB 의 크기가 너무 작아 다른 Process가 배치돼지 않아 ",["$","strong",null,{"children":"자원 활용률이 떨어질 수 있다."}]]}],"\n",["$","p",null,{"children":"그리고 만약 2번 partition이 50MB 였다면 50MB Process를 배치할 수 있지만, 작은 크기의 Process D 때문에 큰 Process를 담을 수 없는 문제점도 생긴다."}],"\n",["$","h4",null,{"children":"Placement strategies[배치 전략] - Best-fit"}],"\n",["$","p",null,{"children":["처음부터 끝까지 순차탐색을 진행하여 Process가 들어갈 수 있는 partition 중 ",["$","strong",null,{"children":"남아있는 공간이 가장 작은 곳"}],"을 선택하는 탐색 기법이다."]}],"\n",["$","p",null,{"children":"위 예로 들면 Process D는 partition 2에 들어가게 될것이다."}],"\n",["$","p",null,{"children":"크기가 큰 partition을 유지할 수 있는 장점이 있다."}],"\n",["$","p",null,{"children":["하지만 중간에 끊을수 있는 First-fit에 비해 모든 partition을 검사해야 하니 ",["$","strong",null,{"children":"탐색 시간이 오래 걸린다(overhead 가 크다)."}]]}],"\n",["$","p",null,{"children":"그리고 작은 크기의(활용하기 너무 작은) partition이 많이 발생할 수 있다."}],"\n",["$","h4",null,{"children":"Placement strategies[배치 전략] - Worst-fit"}],"\n",["$","p",null,{"children":["Best-fit 과 반대로 남이있는 공간이 가장 큰 곳을 선택하는 탐색 기법이다, 마찬가지로 ",["$","strong",null,{"children":"탐색 시간이 오래 걸린다(overhead 가 크다)."}]]}],"\n",["$","p",null,{"children":"위 예로 들면 Process D는 partition 4에 들어가게 될것이다."}],"\n",["$","p",null,{"children":"그리고 작은 크기의(활용하기 너무 작은) partition의 발생을 줄일 수 있지만, 큰 공간을 유지할 수 없는 단점도 있다."}],"\n",["$","h4",null,{"children":"Placement strategies[배치 전략] - Next-fit"}],"\n",["$","p",null,{"children":"위 전략대로면 보통 Memory의 처음 지점 주변에 집중적으로 배치될 가능성이 크다. Next-fit은 First-fit의 시작지점을 마지막으로 State table에서 마지막으로 탐색한 위치로 매번 업데이트 시켜주는 전략이다."}],"\n",["$","p",null,{"children":"위 그림대로면 Process D는 partition 2 에 배치될것이고, 그 다음 Process는 partition 2 부터 순차 탐색이 진행 되게 된다."}],"\n",["$","p",null,{"children":"First-fit 의 장점인 Low overhead를 가지면서 메모리 영역의 사용을 비교적 균등화 할수 있다."}],"\n",["$","h4",null,{"children":"Placement strategies[배치 전략] - Coalescing-holes[공간 통합]"}],"\n",["$","p",null,{"children":"이번엔 반대로 External fragmentation 을 해결하기 위한 방법이다."}],"\n",["$","p",null,{"children":["Coalescing-holes 이란 인접한 ",["$","strong",null,{"children":"빈 영역을 하나의 partition으로 통합"}],"하는 기법이다."]}],"\n",["$","p",null,{"children":["통합을 할 타이밍은 Process가 memory를 release 하고 나가면 수행하면 된다. 자기 자신의 양 옆을 합해 주는걸로 해결할 수 있기 떄문에 ",["$","strong",null,{"children":"overhead가 적은 방법"}],"이다."]}],"\n",["$","p",null,{"children":["위 그림에선 A가 끝난다면 partition은 20MB + 20MB = 40MB로 통합돼게 된다. 하지만 아직 Process E가 들어갈수 없기 때문에 ",["$","strong",null,{"children":"Process E는 계속 대기하다가"}],", Process C가 끝나고 partition이 통합 된 후 Memory에 적재돼게 된다."]}],"\n",["$","h4",null,{"children":"Placement strategies[배치 전략] - Storage Compaction[메모리 압축]"}],"\n",["$","p",null,{"children":"External fragmentation 을 해결하기 위한 두번 째 방법으론 메모리 압축이 있다."}],"\n",["$","p",null,{"children":["이 방법은 중간에 Memory가 비어있다면, ",["$","strong",null,{"children":"Process의 위치들을 한곳으로 몰아넣어"}]," 한 큰 공간을 만드는 방법이다."]}],"\n",["$","p",null,{"children":"위 그림에선 A 와 C가 붙어있기 때문에, 60MB 크기의 Memory가 남게 되므로 E가 들어 갈 수 있게 된다."}],"\n",["$","p",null,{"children":["하지만, 모든 Process 들을 재배치 해야 한다는 뜻은, 모든 Process들을 잠시 중지 한다는 의미와 같다, Process를 중지한다는것은 ",["$","strong",null,{"children":"overhead가 매우 큰 행위"}],"다, 그러므로 자주 해주는 것 보단, 일정 시간, 혹은 요청이 있을때 같은 특별할 때만 해주는 방식으로 운용이 된다."]}]]}]}]
